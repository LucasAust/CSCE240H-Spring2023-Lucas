Lucas Aust

Problem
For this assignment, I had to writa a program that would take a disease from user input, read data from files about this inputted disease,
and answer specific questions about the disease and print it to the console. The program would use calculations to determine the best query to answer based on the user inputted quesition.

Solution
I wrote two classes for this program. The main user interface class, and the disease class. I did this in order to focus on reusability.
In the user interface class, I first greeted the user. Then I switched the method into one that would ask the user what disease they wanted to talk about.
Based on this disease, I had the user add 2 text files that the program would read data from. The program then called a read file method for each of these files, 
and returned the information in an arrayList. Based on these arrayLists and the disease name, I built the default disease by calling the constructor in the disease class.
The disease class had characteristics for each of the 12 question types. I called the setters for each of these characteristics to sort the information. Each setter would loop through 
each article until it found the information that was relevant to that characteristic and stored it in an arrayList. After doing this, I called the main bot method in the ui class.
This method contained a loop that would run each time the user inputted something that wasnt a quit statement. This loop established each of the querys into arraylists that would store
each word in the query. The program then received a question from the user. It would also store each word of the input into an arraylist. The program then called a method to calculate the match 
percentage of each query and the response by dividing the number of shared words to the total length of the query. The method would return this value and the value would be stored in another arraylist
that holds all of the match percentages. The program then called a method to sort the arraylist of percentages and return the highest match percentage. The program would then go through the match percentage
for each query until it finds the query that corresponds with that percentage. It would then call the getter of the relevant information and print out each line. If no match percentage was over .7,
the program would just ask the user to rephrase and enter their question again. If the user enters the quit statement, the program exits the loop and exits the program.

Challenges
The challenge I faced was trying to figure out how to match up the matching percentage with the corresponding entry. I thought about using a hashmap, but decided to calculate the highest percentage and 
then use if statements to find out which query had that match percentage. Another challenge I faced was how to separate similar querys. For example, if a user inputs what is the symptoms of polio
then it would also match what is polio. So i decided to take the most common phrase and only print those values if it the response matches only that query, and none of the other querys.